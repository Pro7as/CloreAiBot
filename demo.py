#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Clore Bot Pro
"""
import asyncio
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.progress import Progress, SpinnerColumn, TextColumn
import random

console = Console()


async def demo_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    console.clear()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    console.print(Panel.fit(
        "[bold cyan]Clore Bot Pro[/bold cyan]\n"
        "[dim]–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU —Å–µ—Ä–≤–µ—Ä–∞–º–∏[/dim]",
        border_style="cyan"
    ))
    
    await asyncio.sleep(1)
    
    # –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏–π
    await demo_search()
    await demo_balance()
    await demo_orders()
    await demo_ai_chat()
    await demo_monitoring()
    
    console.print("\n[bold green]‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]")
    console.print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: [cyan]python main.py[/cyan]")


async def demo_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    console.print("\n[bold yellow]üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤[/bold yellow]")
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        transient=True,
    ) as progress:
        task = progress.add_task("–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å RTX 4090...", total=None)
        await asyncio.sleep(2)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    table = Table(title="–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
    table.add_column("ID", style="cyan", no_wrap=True)
    table.add_column("GPU", style="magenta")
    table.add_column("CPU", style="green")
    table.add_column("–¶–µ–Ω–∞", style="yellow")
    table.add_column("–†–µ–π—Ç–∏–Ω–≥", style="blue")
    
    servers = [
        ("12345", "4x RTX 4090", "AMD EPYC 7763", "$32.50/–¥–µ–Ω—å", "‚≠ê 4.8"),
        ("23456", "2x RTX 4090", "Intel Xeon Gold", "$16.25/–¥–µ–Ω—å", "‚≠ê 4.5"),
        ("34567", "8x RTX 4090", "AMD EPYC 7713", "$65.00/–¥–µ–Ω—å", "‚≠ê 5.0"),
    ]
    
    for server in servers:
        table.add_row(*server)
    
    console.print(table)
    await asyncio.sleep(2)


async def demo_balance():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    console.print("\n[bold yellow]üí∞ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞[/bold yellow]")
    
    balance_info = """
[bold]–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:[/bold]
‚Ä¢ CLORE: 1,234.56 (~$24.69)
‚Ä¢ BTC: 0.00123456 (~$123.46)

[bold]–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:[/bold] $148.15

[dim]–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å: +$2.34 (+1.6%)[/dim]
    """
    
    console.print(Panel(balance_info, title="–ë–∞–ª–∞–Ω—Å", border_style="green"))
    await asyncio.sleep(2)


async def demo_orders():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    console.print("\n[bold yellow]üì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥[/bold yellow]")
    
    orders_table = Table(title="–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã")
    orders_table.add_column("–ó–∞–∫–∞–∑", style="cyan")
    orders_table.add_column("–°–µ—Ä–≤–µ—Ä", style="magenta")
    orders_table.add_column("–í—Ä–µ–º—è", style="green")
    orders_table.add_column("–°—Ç–æ–∏–º–æ—Å—Ç—å", style="yellow")
    
    orders_table.add_row("#78901", "4x RTX 3090", "12—á 34–º", "$45.60")
    orders_table.add_row("#89012", "2x RTX 4090", "3–¥ 5—á", "$195.00")
    
    console.print(orders_table)
    console.print("[yellow]–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:[/yellow] [bold]$240.60/–¥–µ–Ω—å[/bold]")
    await asyncio.sleep(2)


async def demo_ai_chat():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI —á–∞—Ç–∞"""
    console.print("\n[bold yellow]ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞[/bold yellow]")
    
    conversations = [
        ("–ù–∞–π–¥–∏ —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å RTX 3080", 
         "–ù–∞—à–µ–ª 5 —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å RTX 3080:\n1. #45678 - 2x RTX 3080 - $8.50/–¥–µ–Ω—å\n2. #56789 - 1x RTX 3080 - $4.25/–¥–µ–Ω—å\n..."),
        
        ("–ê—Ä–µ–Ω–¥—É–π —Å–µ—Ä–≤–µ—Ä 45678",
         "–°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ #45678...\n‚úÖ –ó–∞–∫–∞–∑ #90123 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nSSH: ssh root@node1.clore.ai -p 10022"),
        
        ("–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?",
         "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π:\n‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: $284.75\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: $40.68/–¥–µ–Ω—å\n‚Ä¢ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∑–∞–∫–∞–∑: #78901 ($125.50)")
    ]
    
    for user_msg, bot_response in conversations:
        console.print(f"\n[bold cyan]–í—ã:[/bold cyan] {user_msg}")
        await asyncio.sleep(1)
        console.print(f"[bold green]–ë–æ—Ç:[/bold green] {bot_response}")
        await asyncio.sleep(2)


async def demo_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    console.print("\n[bold yellow]üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞[/bold yellow]")
    
    with Live(generate_monitoring_display(), refresh_per_second=2) as live:
        for _ in range(6):
            await asyncio.sleep(0.5)
            live.update(generate_monitoring_display())


def generate_monitoring_display():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    layout = Layout()
    
    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    balance = 1234.56 + random.uniform(-10, 10)
    active_orders = random.randint(3, 5)
    
    monitoring_text = f"""
[bold]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã[/bold]
–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

[green]‚óè –ë–∞–ª–∞–Ω—Å CLORE:[/green] {balance:.2f}
[green]‚óè –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥:[/green] {active_orders}
[yellow]‚óè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:[/yellow] OK
[blue]‚óè AI –∞–≥–µ–Ω—Ç:[/blue] –ì–æ—Ç–æ–≤

[dim]–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω[/dim]
    """
    
    return Panel(monitoring_text, title="–°—Ç–∞—Ç—É—Å", border_style="blue")


if __name__ == "__main__":
    try:
        import rich
    except ImportError:
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ rich: pip install rich")
        exit(1)
    
    asyncio.run(demo_main())