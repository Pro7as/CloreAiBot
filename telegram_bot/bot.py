"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞
"""
import asyncio
from typing import Optional
from loguru import logger

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import settings
from database.session import get_db
from database.models import User
from database.crud import get_user_by_telegram_id, create_user, update_user_api_key
from ai_agent.agent import CloreAIAgent
from telegram_bot.keyboards.inline import (
    get_main_menu_keyboard, 
    get_settings_keyboard,
    get_server_list_keyboard,
    get_confirm_keyboard
)
from telegram_bot.middlewares.auth import AuthMiddleware


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    entering_api_key = State()
    entering_ssh_password = State()
    entering_jupyter_token = State()
    selecting_servers = State()
    confirming_order = State()


class CloreBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(token=settings.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.agents = {}  # –ö–µ—à AI –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ user_id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        self.dp.message.middleware(AuthMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, CommandStart())
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_settings, Command("settings"))
        self.dp.message.register(self.cmd_balance, Command("balance"))
        self.dp.message.register(self.cmd_orders, Command("orders"))
        self.dp.message.register(self.cmd_servers, Command("servers"))
        self.dp.message.register(self.cmd_menu, Command("menu"))
        
        # Callback handlers
        self.dp.callback_query.register(self.callback_main_menu, lambda c: c.data == "main_menu")
        self.dp.callback_query.register(self.callback_settings, lambda c: c.data.startswith("settings:"))
        self.dp.callback_query.register(self.callback_server_action, lambda c: c.data.startswith("server:"))
        self.dp.callback_query.register(self.callback_page_navigation, lambda c: c.data.startswith("page:"))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.dp.message.register(self.process_api_key, UserStates.entering_api_key)
        self.dp.message.register(self.process_ssh_password, UserStates.entering_ssh_password)
        self.dp.message.register(self.process_jupyter_token, UserStates.entering_jupyter_token)
        
        # AI –∞–≥–µ–Ω—Ç - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.process_ai_query)
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        
        async with get_db() as db:
            user = await get_user_by_telegram_id(db, user_id)
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await create_user(
                    db,
                    telegram_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Clore Bot Pro!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Ä–µ–Ω–¥–æ–π GPU —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Clore.ai\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á.",
                    reply_markup=get_settings_keyboard(has_api_key=False)
                )
            else:
                await message.answer(
                    f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu_keyboard()
                )
    
    async def cmd_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (API –∫–ª—é—á–∏, –ø–∞—Ä–æ–ª–∏)
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/orders - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
/servers - –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤

**ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–µ—Ä–≤–µ—Ä—ã —Å RTX 4090"
‚Ä¢ "–ù–∞–π–¥–∏ –¥–µ—à–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å 3070"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —è —Ç—Ä–∞—á—É –Ω–∞ –∞—Ä–µ–Ω–¥—É?"
‚Ä¢ "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä 12345"

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: —Ü–µ–Ω–∞, GPU, —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ AI –ø–æ–Ω–∏–º–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ú–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å—Ä–∞–∑—É
"""
        await message.answer(help_text)
    
    async def cmd_settings(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        async with get_db() as db:
            user = await get_user_by_telegram_id(db, message.from_user.id)
            
        await message.answer(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**",
            reply_markup=get_settings_keyboard(has_api_key=bool(user.clore_api_key))
        )
    
    async def cmd_balance(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        await self._execute_ai_command(message, "–ø–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å")
    
    async def cmd_orders(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders"""
        await self._execute_ai_command(message, "–º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã")
    
    async def cmd_servers(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /servers"""
        await self._execute_ai_command(message, "–ø–æ–∫–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
    
    async def cmd_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await message.answer(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    async def callback_main_menu(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.edit_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    
    async def callback_settings(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        action = callback.data.split(":")[1]
        
        if action == "api_key":
            await callback.message.answer(
                "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Clore API –∫–ª—é—á:\n\n"
                "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞ https://clore.ai/profile/api"
            )
            await state.set_state(UserStates.entering_api_key)
            
        elif action == "ssh_password":
            await callback.message.answer(
                "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å SSH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                "(–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞)"
            )
            await state.set_state(UserStates.entering_ssh_password)
            
        elif action == "jupyter_token":
            await callback.message.answer(
                "üé´ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Jupyter –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                "(–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞)"
            )
            await state.set_state(UserStates.entering_jupyter_token)
            
        elif action == "back":
            await callback.message.edit_text(
                "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
        
        await callback.answer()
    
    async def process_api_key(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞"""
        api_key = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        try:
            from clore_api.client import CloreAPIClient
            async with CloreAPIClient(api_key) as client:
                await client.get_wallets()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
            async with get_db() as db:
                await update_user_api_key(db, message.from_user.id, api_key)
            
            await message.answer(
                "‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞: {str(e)}\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        
        await state.clear()
    
    async def process_ssh_password(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ SSH –ø–∞—Ä–æ–ª—è"""
        password = message.text.strip()[:32]
        
        async with get_db() as db:
            user = await get_user_by_telegram_id(db, message.from_user.id)
            user.default_ssh_password = password
            await db.commit()
        
        await message.answer(
            "‚úÖ SSH –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
    
    async def process_jupyter_token(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Jupyter —Ç–æ–∫–µ–Ω–∞"""
        token = message.text.strip()[:32]
        
        async with get_db() as db:
            user = await get_user_by_telegram_id(db, message.from_user.id)
            user.default_jupyter_token = token
            await db.commit()
        
        await message.answer(
            "‚úÖ Jupyter —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
    
    async def callback_server_action(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
        parts = callback.data.split(":")
        action = parts[1]
        
        if action == "search":
            await callback.message.answer(
                "üîç –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã —Å RTX 4090\n"
                "‚Ä¢ –î–µ—à–µ–≤–ª–µ $2 –∑–∞ –∫–∞—Ä—Ç—É 3080\n"
                "‚Ä¢ 4 –∫–∞—Ä—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 4"
            )
        elif action == "hunt":
            await callback.message.answer(
                "üéØ –§—É–Ω–∫—Ü–∏—è '–û—Ö–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!"
            )
        
        await callback.answer()
    
    async def callback_page_navigation(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await callback.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def process_ai_query(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞"""
        await self._execute_ai_command(message, message.text)
    
    async def _execute_ai_command(self, message: Message, query: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞"""
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        async with get_db() as db:
            user = await get_user_by_telegram_id(db, user_id)
            
            if not user or not user.clore_api_key:
                await message.answer(
                    "‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á Clore.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings",
                    reply_markup=get_settings_keyboard(has_api_key=False)
                )
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.agents:
                self.agents[user_id] = CloreAIAgent(user.clore_api_key)
            
            agent = self.agents[user_id]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context = {
                'user_id': user_id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name
            }
            response = await agent.process_query(query, user_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await loading_msg.delete()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(response) > 4000:
                parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                for part in parts:
                    await message.answer(part, parse_mode="Markdown")
            else:
                await message.answer(response, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"Error processing AI query: {e}")
            await loading_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Clore Bot Pro...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await self.bot.set_my_commands([
            types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            types.BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            types.BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            types.BotCommand(command="balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            types.BotCommand(command="orders", description="–ú–æ–∏ –∞—Ä–µ–Ω–¥—ã"),
            types.BotCommand(command="servers", description="–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"),
            types.BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Clore Bot Pro...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ AI –∞–≥–µ–Ω—Ç—ã
        for agent in self.agents.values():
            await agent.close()
        
        await self.bot.session.close()
