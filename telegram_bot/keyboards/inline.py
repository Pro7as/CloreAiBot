"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="action:balance"),
            InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="action:orders")
        ],
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="server:search"),
            InlineKeyboardButton(text="üéØ –û—Ö–æ—Ç–∞", callback_data="server:hunt")
        ],
        [
            InlineKeyboardButton(text="üñ•Ô∏è –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã", callback_data="action:my_servers"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action:stats")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_settings_keyboard(has_api_key: bool = False) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = []
    
    # API –∫–ª—é—á
    api_key_text = "‚úÖ API –∫–ª—é—á" if has_api_key else "‚ùå API –∫–ª—é—á"
    keyboard.append([
        InlineKeyboardButton(text=api_key_text, callback_data="settings:api_key")
    ])
    
    # –ü–∞—Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    keyboard.extend([
        [
            InlineKeyboardButton(text="üîê SSH –ø–∞—Ä–æ–ª—å", callback_data="settings:ssh_password"),
            InlineKeyboardButton(text="üé´ Jupyter —Ç–æ–∫–µ–Ω", callback_data="settings:jupyter_token")
        ],
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings:notifications")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_server_list_keyboard(
    servers: List[Dict[str, Any]], 
    current_page: int = 0,
    total_pages: int = 1,
    selected_servers: Optional[List[int]] = None
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞"""
    if selected_servers is None:
        selected_servers = []
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    for server in servers:
        server_id = server.get('id')
        gpu = server.get('specs', {}).get('gpu', 'Unknown')
        price, _ = extract_server_price(server)
        
        # –ß–µ–∫–±–æ–∫—Å
        check = "‚úÖ" if server_id in selected_servers else "‚¨ú"
        
        text = f"{check} #{server_id} | {gpu} | ${price:.2f}/–¥"
        callback_data = f"select_server:{server_id}"
        
        keyboard.append([
            InlineKeyboardButton(text=text, callback_data=callback_data)
        ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{current_page-1}")
        )
    
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}", 
            callback_data="page:current"
        )
    )
    
    if current_page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page:{current_page+1}")
        )
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–µ–π—Å—Ç–≤–∏—è
    action_buttons = []
    if selected_servers:
        action_buttons.append(
            InlineKeyboardButton(
                text=f"‚úÖ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å ({len(selected_servers)})", 
                callback_data="action:rent_selected"
            )
        )
    
    action_buttons.append(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="action:refresh")
    )
    action_buttons.append(
        InlineKeyboardButton(text="‚óÄÔ∏è –ú–µ–Ω—é", callback_data="main_menu")
    )
    
    keyboard.append(action_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_docker_templates_keyboard(templates: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ Docker —à–∞–±–ª–æ–Ω–∞"""
    keyboard = []
    
    for template in templates[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —à–∞–±–ª–æ–Ω–æ–≤
        name = template.get('name', 'Unnamed')
        category = template.get('category', 'other')
        emoji = {
            'mining': '‚õèÔ∏è',
            'ai': 'ü§ñ',
            'rendering': 'üé®',
            'computing': 'üßÆ'
        }.get(category, 'üì¶')
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{emoji} {name}",
                callback_data=f"template:{template['id']}"
            )
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="template:create")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_order_details_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"order:details:{order_id}"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"order:stats:{order_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"order:extend:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"order:cancel:{order_id}")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="action:orders")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirm_keyboard(action: str, data: Any = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{action}:{data}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_hunt_settings_keyboard(hunt_task_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ö–æ—Ç—ã"""
    keyboard = []
    
    if hunt_task_id:
        keyboard.extend([
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"hunt:start:{hunt_task_id}"),
                InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data=f"hunt:pause:{hunt_task_id}")
            ],
            [
                InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"hunt:edit:{hunt_task_id}"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"hunt:delete:{hunt_task_id}")
            ]
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="hunt:create")
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_notification_settings_keyboard(user_settings: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    sound_enabled = user_settings.get('alert_sound_enabled', True)
    sound_emoji = "üîî" if sound_enabled else "üîï"
    
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{sound_emoji} –ó–≤—É–∫: {'–í–∫–ª' if sound_enabled else '–í—ã–∫–ª'}",
                callback_data="settings:toggle_sound"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí∞ –ü–æ—Ä–æ–≥ –±–∞–ª–∞–Ω—Å–∞",
                callback_data="settings:balance_threshold"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏",
                callback_data="settings:expiry_hours"
            )
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
def extract_server_price(server_data: Dict[str, Any]) -> tuple[Optional[float], Optional[str]]:
    """–ò–∑–≤–ª–µ—á—å —Ü–µ–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
    from config import settings
    
    price_data = server_data.get('price', {})
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¶–µ–Ω–∞ –≤ USD
    usd_price = price_data.get('usd', {}).get('on_demand_clore')
    if usd_price is not None:
        return usd_price, 'USD'
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≤ CLORE
    clore_price = price_data.get('on_demand', {}).get('CLORE-Blockchain')
    if clore_price is not None:
        usd_equivalent = clore_price * settings.clore_to_usd
        return usd_equivalent, 'CLORE_FIXED'
    
    return None, None