#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞
"""
import asyncio
import sys
from loguru import logger
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from ai_agent.agent import CloreAIAgent
from config import settings

console = Console()


async def test_agent():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    console.clear()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    console.print(Panel.fit(
        "[bold cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Clore AI Agent[/bold cyan]\n"
        "[dim]–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞[/dim]",
        border_style="cyan"
    ))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    if not settings.openai_api_key:
        console.print("[red]‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API –∫–ª—é—á![/red]")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Clore API –∫–ª—é—á
    console.print("\n[yellow]–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Clore API –∫–ª—é—á:[/yellow]")
    api_key = input("> ").strip()
    
    if not api_key:
        console.print("[red]‚ùå API –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω![/red]")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    console.print("\n[green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...[/green]")
    agent = CloreAIAgent(api_key)
    
    console.print("[green]‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ![/green]\n")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    examples = [
        "–ü–æ–∫–∞–∂–∏ –º–æ–π –±–∞–ª–∞–Ω—Å",
        "–ù–∞–π–¥–∏ –¥–µ—à–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å RTX 3080",
        "–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        "–ê—Ä–µ–Ω–¥—É–π —Å–µ—Ä–≤–µ—Ä 12345",
        "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?",
        "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã"
    ]
    
    console.print("[dim]–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:[/dim]")
    for example in examples:
        console.print(f"[dim]‚Ä¢ {example}[/dim]")
    
    console.print("\n" + "="*50 + "\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while True:
            # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.print("[bold cyan]–í—ã:[/bold cyan]", end=" ")
            query = input().strip()
            
            if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                break
            
            if not query:
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            console.print("\n[dim]ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...[/dim]")
            
            try:
                response = await agent.process_query(query)
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                console.print("\n[bold green]AI Agent:[/bold green]")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º markdown
                if response.startswith("#") or "**" in response or "```" in response:
                    md = Markdown(response)
                    console.print(md)
                else:
                    console.print(response)
                
            except Exception as e:
                console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞: {str(e)}[/red]")
                logger.error(f"Error processing query: {e}", exc_info=True)
            
            console.print("\n" + "="*50 + "\n")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.close()
        console.print("\n[yellow]–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")


async def test_specific_queries():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
        "–ü–æ–∫–∞–∂–∏ —Å–µ—Ä–≤–µ—Ä—ã —Å 4090 –¥–µ—à–µ–≤–ª–µ 10 –¥–æ–ª–ª–∞—Ä–æ–≤",
        "–ù–∞–π–¥–∏ —Å–µ—Ä–≤–µ—Ä—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
        "–ú–Ω–µ –Ω—É–∂–Ω–æ 4 –∫–∞—Ä—Ç—ã 3090 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞",
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —Å A100?",
        "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"
    ]
    
    console.print("[bold]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:[/bold]\n")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
    agent = CloreAIAgent("test_api_key")
    
    for query in test_queries:
        console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å:[/cyan] {query}")
        
        try:
            response = await agent.process_query(query)
            console.print(f"[green]–û—Ç–≤–µ—Ç:[/green] {response[:200]}...")
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞:[/red] {str(e)}")
        
        console.print("-" * 50)
        await asyncio.sleep(1)
    
    await agent.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Clore AI Agent")
    parser.add_argument(
        "--mode", 
        choices=["interactive", "test"], 
        default="interactive",
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, test - —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO"
    )
    
    try:
        if args.mode == "interactive":
            await test_agent()
        else:
            await test_specific_queries()
    except KeyboardInterrupt:
        console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"\n[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}[/red]")
        logger.error("Critical error", exc_info=True)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rich
    try:
        import rich
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞: pip install rich")
        sys.exit(1)
    
    asyncio.run(main())
