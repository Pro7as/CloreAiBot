"""
–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
from typing import Optional
from datetime import datetime
from loguru import logger
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import settings
from database.session import get_db
from database.crud import get_unsent_alerts, mark_alert_sent


class AlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.running = False
        self.check_interval = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        logger.info("Alert service started")
        
        while self.running:
            try:
                await self._process_alerts()
            except Exception as e:
                logger.error(f"Error in alert service: {e}")
            
            await asyncio.sleep(self.check_interval)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"""
        self.running = False
        logger.info("Alert service stopped")
    
    async def _process_alerts(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        async with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
            result = await db.execute(
                """
                SELECT DISTINCT user_id FROM alerts 
                WHERE is_sent = false
                """
            )
            user_ids = [row[0] for row in result.fetchall()]
            
            for user_id in user_ids:
                user_alerts = await get_unsent_alerts(db, user_id)
                
                for alert in user_alerts:
                    await self._send_alert(alert)
    
    async def _send_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è telegram_id
            async with get_db() as db:
                result = await db.execute(
                    f"SELECT telegram_id, alert_sound_enabled FROM users WHERE id = {alert.user_id}"
                )
                user_data = result.fetchone()
                
                if not user_data:
                    logger.error(f"User {alert.user_id} not found for alert {alert.id}")
                    return
                
                telegram_id, sound_enabled = user_data
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"**{alert.title}**\n\n{alert.message}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                keyboard = self._get_alert_keyboard(alert.alert_type)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                    disable_notification=not sound_enabled
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                await mark_alert_sent(db, alert.id)
                
        except Exception as e:
            logger.error(f"Failed to send alert {alert.id}: {e}")
            async with get_db() as db:
                await mark_alert_sent(db, alert.id, error=str(e))
    
    def _get_alert_keyboard(self, alert_type: str) -> Optional[InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        keyboard = []
        
        if alert_type in ['balance_low', 'balance_drop']:
            keyboard.append([
                InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="action:balance")
            ])
        
        elif alert_type in ['order_expiring', 'order_expired']:
            keyboard.append([
                InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="action:orders")
            ])
        
        elif alert_type == 'server_rented':
            keyboard.append([
                InlineKeyboardButton(text="üñ•Ô∏è –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã", callback_data="action:my_servers")
            ])
        
        elif alert_type == 'hunt_found':
            keyboard.append([
                InlineKeyboardButton(text="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ö–æ—Ç—ã", callback_data="action:hunt_results")
            ])
        
        if keyboard:
            return InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        return None


async def send_custom_alert(
    bot: Bot,
    telegram_id: int,
    title: str,
    message: str,
    keyboard: Optional[InlineKeyboardMarkup] = None,
    sound: bool = True
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=f"**{title}**\n\n{message}",
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_notification=not sound
        )
    except Exception as e:
        logger.error(f"Failed to send custom alert to {telegram_id}: {e}")