"""
–°–µ—Ä–≤–∏—Å –æ—Ö–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
"""
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from loguru import logger

from config import settings
from database.session import get_db
from database.crud import (
    get_active_hunt_tasks, create_alert, 
    get_docker_templates, save_order
)
from database.models import HuntTask, HuntResult
from clore_api.client import CloreAPIClient


class HuntMonitor:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ö–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã"""
    
    def __init__(self):
        self.running = False
        self.check_interval = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.found_servers = {}  # –ö–µ—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ö–æ—Ç—É"""
        self.running = True
        logger.info("Hunt monitor started")
        
        while self.running:
            try:
                await self._process_hunt_tasks()
            except Exception as e:
                logger.error(f"Error in hunt monitor: {e}")
            
            await asyncio.sleep(self.check_interval)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ö–æ—Ç—É"""
        self.running = False
        logger.info("Hunt monitor stopped")
    
    async def _process_hunt_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ö–æ—Ç—ã"""
        async with get_db() as db:
            tasks = await get_active_hunt_tasks(db)
            
            for task in tasks:
                try:
                    await self._process_single_task(task)
                except Exception as e:
                    logger.error(f"Error processing hunt task {task.id}: {e}")
    
    async def _process_single_task(self, task: HuntTask):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –æ—Ö–æ—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ API –∫–ª—é—á
        async with get_db() as db:
            user = await db.get(type(task.user), task.user_id)
            
            if not user or not user.clore_api_key:
                logger.warning(f"User {task.user_id} has no API key")
                return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
        async with CloreAPIClient(user.clore_api_key) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
            marketplace_data = await client.get_marketplace()
            servers = marketplace_data.get('servers', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            matching_servers = self._filter_servers_by_criteria(
                servers, 
                task.filters
            )
            
            if not matching_servers:
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            await self._process_found_servers(
                client, task, user, matching_servers
            )
    
    def _filter_servers_by_criteria(
        self, 
        servers: List[Dict], 
        criteria: Dict[str, Any]
    ) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ—Ö–æ—Ç—ã"""
        filtered = []
        
        for server in servers:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ
            if server.get('rented'):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            if not self._server_matches_criteria(server, criteria):
                continue
            
            filtered.append(server)
        
        return filtered
    
    def _server_matches_criteria(
        self, 
        server: Dict, 
        criteria: Dict[str, Any]
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        specs = server.get('specs', {})
        
        # GPU –º–æ–¥–µ–ª—å
        if 'gpu_models' in criteria and criteria['gpu_models']:
            gpu_str = specs.get('gpu', '').upper()
            if not any(model.upper() in gpu_str for model in criteria['gpu_models']):
                return False
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ GPU
        if 'max_price_per_gpu' in criteria:
            from clore_api.client import CloreAPIClient
            client = CloreAPIClient("")
            
            price, _ = client.extract_server_price(server)
            if price is None:
                return False
            
            gpu_count, _ = client.extract_gpu_info(specs.get('gpu', ''))
            if gpu_count > 0:
                price_per_gpu = price / gpu_count
                if price_per_gpu > criteria['max_price_per_gpu']:
                    return False
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU
        if 'min_gpu_count' in criteria:
            gpu_str = specs.get('gpu', '')
            count = int(gpu_str.split('x')[0]) if 'x' in gpu_str else 1
            if count < criteria['min_gpu_count']:
                return False
        
        if 'max_gpu_count' in criteria:
            gpu_str = specs.get('gpu', '')
            count = int(gpu_str.split('x')[0]) if 'x' in gpu_str else 1
            if count > criteria['max_gpu_count']:
                return False
        
        # RAM
        if 'min_ram_gb' in criteria:
            ram = specs.get('ram', 0)
            if ram < criteria['min_ram_gb']:
                return False
        
        # –õ–æ–∫–∞—Ü–∏—è
        if 'locations' in criteria and criteria['locations']:
            location = specs.get('net', {}).get('cc', '')
            if location not in criteria['locations']:
                return False
        
        # –†–µ–π—Ç–∏–Ω–≥
        if 'min_rating' in criteria:
            rating = server.get('rating', {}).get('avg', 0)
            if rating < criteria['min_rating']:
                return False
        
        return True
    
    async def _process_found_servers(
        self,
        client: CloreAPIClient,
        task: HuntTask,
        user,
        servers: List[Dict]
    ):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤
        if task.servers_rented >= task.max_servers:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        servers.sort(
            key=lambda s: client.extract_server_price(s)[0] or float('inf')
        )
        
        for server in servers:
            server_id = server['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä
            cache_key = f"{task.id}:{server_id}"
            if cache_key in self.found_servers:
                last_found = self.found_servers[cache_key]
                if datetime.now() - last_found < timedelta(hours=1):
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.found_servers[cache_key] = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –æ –Ω–∞—Ö–æ–¥–∫–µ
            async with get_db() as db:
                await self._create_found_alert(db, task, user, server)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                task.servers_found += 1
                task.last_found_at = datetime.utcnow()
                await db.commit()
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–∞—Ä–µ–Ω–¥–∞
            if task.auto_rent:
                success = await self._auto_rent_server(
                    client, task, user, server
                )
                
                if success:
                    task.servers_rented += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if task.servers_rented >= task.max_servers:
                        task.is_active = False
                        logger.info(f"Hunt task {task.id} reached limit")
                        break
    
    async def _create_found_alert(
        self, 
        db, 
        task: HuntTask, 
        user, 
        server: Dict
    ):
        """–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        gpu = server.get('specs', {}).get('gpu', 'Unknown')
        price, _ = CloreAPIClient("").extract_server_price(server)
        
        message = (
            f"üéØ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –ø–æ –∑–∞–¥–∞—á–µ '{task.name}':\n"
            f"‚Ä¢ ID: #{server['id']}\n"
            f"‚Ä¢ GPU: {gpu}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: ${price:.2f}/–¥–µ–Ω—å\n"
        )
        
        if task.auto_rent:
            message += "\nü§ñ –ü—ã—Ç–∞—é—Å—å –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
        else:
            message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å {server['id']}' –¥–ª—è –∞—Ä–µ–Ω–¥—ã"
        
        await create_alert(
            db,
            user_id=user.id,
            alert_type='hunt_found',
            title='üéØ –°–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω!',
            message=message
        )
    
    async def _auto_rent_server(
        self,
        client: CloreAPIClient,
        task: HuntTask,
        user,
        server: Dict
    ) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–µ–Ω–¥—ã
            rent_settings = task.rent_settings or {}
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω Docker
            if task.docker_template_id:
                async with get_db() as db:
                    template = await db.get(
                        DockerTemplate, 
                        task.docker_template_id
                    )
                    if template:
                        rent_settings.update({
                            'image': template.image,
                            'ports': template.ports,
                            'env': template.env,
                            'command': template.command
                        })
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            image = rent_settings.get('image', 'cloreai/jupyter:ubuntu24.04-v2')
            ports = rent_settings.get('ports', {"22": "tcp", "8888": "http"})
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            result = await client.create_order(
                currency="CLORE-Blockchain",
                image=image,
                renting_server=server['id'],
                order_type="on-demand",
                ports=ports,
                env=rent_settings.get('env', {}),
                jupyter_token=user.default_jupyter_token or "auto",
                ssh_password=user.default_ssh_password or "auto",
                command=rent_settings.get('command'),
                autossh_entrypoint=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            if result.get('code') == 0:
                async with get_db() as db:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    await create_alert(
                        db,
                        user_id=user.id,
                        alert_type='hunt_rented',
                        title='‚úÖ –°–µ—Ä–≤–µ—Ä –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω!',
                        message=f'–°–µ—Ä–≤–µ—Ä #{server["id"]} —É—Å–ø–µ—à–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ø–æ –∑–∞–¥–∞—á–µ "{task.name}"'
                    )
                
                return True
            
        except Exception as e:
            logger.error(f"Failed to auto-rent server {server['id']}: {e}")
        
        return False