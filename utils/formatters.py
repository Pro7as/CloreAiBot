"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
from typing import Union, Optional
from datetime import datetime, timedelta


def format_price(amount: float, currency: str = "USD") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É"""
    if currency == "USD":
        return f"${amount:.2f}"
    elif currency == "CLORE":
        return f"{amount:.2f} CLORE"
    elif currency == "BTC":
        return f"{amount:.8f} BTC"
    else:
        return f"{amount:.2f} {currency}"


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes}–º"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        if minutes > 0:
            return f"{hours}—á {minutes}–º"
        return f"{hours}—á"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        if hours > 0:
            return f"{days}–¥ {hours}—á"
        return f"{days}–¥"


def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    now = datetime.now()
    diff = now - dt
    
    if diff < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif diff < timedelta(hours=1):
        minutes = int(diff.total_seconds() / 60)
        return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=1):
        hours = int(diff.total_seconds() / 3600)
        return f"{hours} —á –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=7):
        days = diff.days
        return f"{days} –¥–Ω –Ω–∞–∑–∞–¥"
    else:
        return dt.strftime("%d.%m.%Y %H:%M")


def format_percentage(value: float, decimals: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç"""
    return f"{value:.{decimals}f}%"


def format_size(bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞/–¥–∞–Ω–Ω—ã—Ö"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes < 1024.0:
            return f"{bytes:.1f} {unit}"
        bytes /= 1024.0
    return f"{bytes:.1f} PB"


def format_gpu_string(gpu_count: int, gpu_model: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É GPU"""
    if gpu_count == 1:
        return gpu_model
    return f"{gpu_count}x {gpu_model}"


def format_server_id(server_id: Union[int, str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å ID —Å–µ—Ä–≤–µ—Ä–∞"""
    return f"#{server_id}"


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix


def format_list(items: list, separator: str = ", ", max_items: int = 10) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    if len(items) <= max_items:
        return separator.join(str(item) for item in items)
    
    displayed = items[:max_items]
    remaining = len(items) - max_items
    result = separator.join(str(item) for item in displayed)
    return f"{result} –∏ –µ—â–µ {remaining}"


def format_balance_change(current: float, previous: float, currency: str = "CLORE") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    if previous == 0:
        return "‚Äî"
    
    change = current - previous
    percent = (change / previous) * 100
    
    if change > 0:
        emoji = "üìà"
        sign = "+"
    elif change < 0:
        emoji = "üìâ"
        sign = ""
    else:
        return "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    return f"{emoji} {sign}{change:.4f} {currency} ({sign}{percent:.1f}%)"


def format_rating(rating: float, count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
    stars = "‚≠ê" * int(rating)
    return f"{stars} {rating:.1f} ({count} –æ—Ç–∑—ã–≤–æ–≤)"


def format_reliability(reliability: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å"""
    percent = reliability * 100
    if percent >= 99.9:
        emoji = "üü¢"
    elif percent >= 99:
        emoji = "üü°"
    else:
        emoji = "üî¥"
    
    return f"{emoji} {percent:.2f}%"


def format_power_consumption(power_watts: int, gpu_count: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"""
    total = power_watts * gpu_count
    if total < 1000:
        return f"‚ö° {total}W"
    else:
        kw = total / 1000
        return f"‚ö° {kw:.1f}kW"