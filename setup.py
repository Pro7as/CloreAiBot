#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Clore Bot Pro
"""
import os
import sys
import asyncio
from pathlib import Path
from getpass import getpass
import secrets


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Clore Bot Pro!")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 10):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –≤—ã—à–µ!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = Path(".env")
    if env_path.exists():
        overwrite = input("\n‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if overwrite.lower() != 'y':
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
    
    print("\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    config = {}
    
    # Telegram Bot
    print("\n1. Telegram Bot")
    config['BOT_TOKEN'] = input("   Bot Token (@BotFather): ").strip()
    config['BOT_USERNAME'] = input("   Bot Username (–±–µ–∑ @): ").strip()
    
    # OpenAI
    print("\n2. OpenAI")
    config['OPENAI_API_KEY'] = getpass("   API Key: ").strip()
    config['OPENAI_MODEL'] = input("   Model (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4-turbo-preview): ").strip() or "gpt-4-turbo-preview"
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    db_type = input("   –¢–∏–ø –ë–î (sqlite/postgresql) [sqlite]: ").strip().lower() or "sqlite"
    
    if db_type == "postgresql":
        db_host = input("   Host [localhost]: ").strip() or "localhost"
        db_port = input("   Port [5432]: ").strip() or "5432"
        db_name = input("   Database name [clorebot]: ").strip() or "clorebot"
        db_user = input("   Username [clore]: ").strip() or "clore"
        db_pass = getpass("   Password: ").strip()
        config['DATABASE_URL'] = f"postgresql+asyncpg://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}"
    else:
        config['DATABASE_URL'] = "sqlite+aiosqlite:///./clore_bot.db"
    
    # –ê–¥–º–∏–Ω—ã
    print("\n4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
    admin_ids = input("   Telegram ID –∞–¥–º–∏–Ω–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
    config['ADMIN_IDS'] = admin_ids
    
    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
    print("\n5. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    config['CLORE_TO_USD'] = input("   –ö—É—Ä—Å CLORE/USD [0.02]: ").strip() or "0.02"
    config['BTC_TO_USD'] = input("   –ö—É—Ä—Å BTC/USD [100000]: ").strip() or "100000"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config['CLORE_API_BASE_URL'] = "https://api.clore.ai/v1"
    config['BALANCE_CHECK_INTERVAL'] = "600"
    config['SERVER_CHECK_INTERVAL'] = "300"
    config['SERVERS_PER_PAGE'] = "10"
    config['ENABLE_PREMIUM_CHECK'] = "false"
    
    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    with open(".env", "w") as f:
        for key, value in config.items():
            f.write(f"{key}={value}\n")
    
    print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    dirs = ["logs", "data", "backups"]
    for dir_name in dirs:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"   ‚úì {dir_name}/")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db = input("\nüóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (Y/n): ")
    if init_db.lower() != 'n':
        print("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        for key, value in config.items():
            os.environ[key] = value
        
        try:
            from database.session import init_db
            await init_db()
            print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Docker —à–∞–±–ª–æ–Ω–æ–≤
    create_templates = input("\nüê≥ –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ Docker —à–∞–±–ª–æ–Ω—ã? (Y/n): ")
    if create_templates.lower() != 'n':
        await create_default_templates()
    
    print("\n" + "=" * 50)
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  python main.py")
    print("\n–ò–ª–∏ —Å Docker:")
    print("  docker-compose up -d")
    print("\n–£–¥–∞—á–∏! üöÄ")


async def create_default_templates():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ Docker —à–∞–±–ª–æ–Ω—ã"""
    print("   –°–æ–∑–¥–∞–Ω–∏–µ Docker —à–∞–±–ª–æ–Ω–æ–≤...")
    
    try:
        from database.session import get_db
        from database.crud import create_docker_template
        
        templates = [
            {
                "name": "Ubuntu + Jupyter",
                "image": "cloreai/jupyter:ubuntu24.04-v2",
                "description": "Ubuntu 24.04 —Å Jupyter Notebook",
                "category": "computing",
                "ports": {"22": "tcp", "8888": "http"},
                "command": "#!/bin/sh\napt update -y"
            },
            {
                "name": "PyTorch Latest",
                "image": "pytorch/pytorch:latest",
                "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ PyTorch",
                "category": "ai",
                "ports": {"22": "tcp"},
                "min_gpu_ram": 8
            },
            {
                "name": "TensorFlow GPU",
                "image": "tensorflow/tensorflow:latest-gpu",
                "description": "TensorFlow —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU",
                "category": "ai",
                "ports": {"22": "tcp", "8888": "http"},
                "min_gpu_ram": 8
            }
        ]
        
        async with get_db() as db:
            for template_data in templates:
                await create_docker_template(db, **template_data)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã: {e}")


if __name__ == "__main__":
    asyncio.run(main())
